plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java-test-fixtures'
    id 'jacoco'
    id "io.freefair.lombok" version "8.6"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
//}

repositories {
    mavenCentral()
}

sourceSets {
    intTest {
        java {
            srcDirs("src/intTest/java")
            compileClasspath += sourceSets.main.output + test.output
            runtimeClasspath += sourceSets.main.output + test.output
        }
    }
}

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    runtimeOnly 'mysql:mysql-connector-java:8.0.32'

    testImplementation("org.springframework.boot:spring-boot-starter-test"){
        exclude group: "com.vaadin.external.google", module:"android-json"
    }
    testRuntimeOnly 'com.h2database:h2'
    testRuntimeOnly 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:7.0.12'
    intTestImplementation 'com.github.codemonstur:embedded-redis:1.4.3'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ["**/config/*"])
            })
        )
    }
}